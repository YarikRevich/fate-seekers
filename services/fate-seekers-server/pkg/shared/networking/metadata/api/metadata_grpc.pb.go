// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/metadata/metadata.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Metadata_PingConnection_FullMethodName    = "/metadata.Metadata/PingConnection"
	Metadata_GetSessions_FullMethodName       = "/metadata.Metadata/GetSessions"
	Metadata_CreateSession_FullMethodName     = "/metadata.Metadata/CreateSession"
	Metadata_RemoveSession_FullMethodName     = "/metadata.Metadata/RemoveSession"
	Metadata_GetLobbySet_FullMethodName       = "/metadata.Metadata/GetLobbySet"
	Metadata_CreateLobby_FullMethodName       = "/metadata.Metadata/CreateLobby"
	Metadata_RemoveLobby_FullMethodName       = "/metadata.Metadata/RemoveLobby"
	Metadata_GetUserMetadata_FullMethodName   = "/metadata.Metadata/GetUserMetadata"
	Metadata_GetChests_FullMethodName         = "/metadata.Metadata/GetChests"
	Metadata_GetMap_FullMethodName            = "/metadata.Metadata/GetMap"
	Metadata_GetChatMessages_FullMethodName   = "/metadata.Metadata/GetChatMessages"
	Metadata_CreateChatMessage_FullMethodName = "/metadata.Metadata/CreateChatMessage"
)

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Represents service used to retrieve user content related data.
// All the metadata requests require authentication header to be provided, having JWT token saved in it.
type MetadataClient interface {
	// PingConnection performs ping connection and creates user record on the server side at the same time,
	// if such does not exist.
	PingConnection(ctx context.Context, in *PingConnectionRequest, opts ...grpc.CallOption) (*PingConnectionResponse, error)
	// GetSessions performs existing sessions retrieval operation by the configured user.
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error)
	// CreateSession performs session creation operation by the configured user.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// RemoveSession performs session removal operation by the configured user. Allowed for session owner only.
	RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error)
	// GetLobbySet performs existing lobbies retrieval operation by the provided session id, by the configured user.
	GetLobbySet(ctx context.Context, in *GetLobbySetRequest, opts ...grpc.CallOption) (*GetLobbySetResponse, error)
	// CreateLobby performs lobby creation operation by the configured user.
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
	// RemoveLobby performs lobby removal operation by the configured user. Allowed for lobby owner only.
	RemoveLobby(ctx context.Context, in *RemoveLobbyRequest, opts ...grpc.CallOption) (*RemoveLobbyResponse, error)
	// GetUserMetadata performs user metadata retrieval request by the configured user.
	GetUserMetadata(ctx context.Context, in *GetUserMetadataRequest, opts ...grpc.CallOption) (*GetUserMetadataResponse, error)
	// GetChest performs chests retrieval for the selected session by the configured user.
	GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsResponse, error)
	// GetMap performs map retrieval for the selected session by the configured user.
	GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMapResponse], error)
	// GetChatMessages performs chat messages retrieval for the selected session by the configured user.
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChatMessagesResponse], error)
	// CreateChatMessage performs chat message creation for the selected session by the configured user.
	CreateChatMessage(ctx context.Context, in *CreateChatMessageRequest, opts ...grpc.CallOption) (*CreateChatMessageResponse, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) PingConnection(ctx context.Context, in *PingConnectionRequest, opts ...grpc.CallOption) (*PingConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingConnectionResponse)
	err := c.cc.Invoke(ctx, Metadata_PingConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionsResponse)
	err := c.cc.Invoke(ctx, Metadata_GetSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, Metadata_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSessionResponse)
	err := c.cc.Invoke(ctx, Metadata_RemoveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetLobbySet(ctx context.Context, in *GetLobbySetRequest, opts ...grpc.CallOption) (*GetLobbySetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLobbySetResponse)
	err := c.cc.Invoke(ctx, Metadata_GetLobbySet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, Metadata_CreateLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RemoveLobby(ctx context.Context, in *RemoveLobbyRequest, opts ...grpc.CallOption) (*RemoveLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLobbyResponse)
	err := c.cc.Invoke(ctx, Metadata_RemoveLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetUserMetadata(ctx context.Context, in *GetUserMetadataRequest, opts ...grpc.CallOption) (*GetUserMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMetadataResponse)
	err := c.cc.Invoke(ctx, Metadata_GetUserMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChestsResponse)
	err := c.cc.Invoke(ctx, Metadata_GetChests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMapResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[0], Metadata_GetMap_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMapRequest, GetMapResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metadata_GetMapClient = grpc.ServerStreamingClient[GetMapResponse]

func (c *metadataClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChatMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[1], Metadata_GetChatMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetChatMessagesRequest, GetChatMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metadata_GetChatMessagesClient = grpc.ServerStreamingClient[GetChatMessagesResponse]

func (c *metadataClient) CreateChatMessage(ctx context.Context, in *CreateChatMessageRequest, opts ...grpc.CallOption) (*CreateChatMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatMessageResponse)
	err := c.cc.Invoke(ctx, Metadata_CreateChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
// All implementations must embed UnimplementedMetadataServer
// for forward compatibility.
//
// Represents service used to retrieve user content related data.
// All the metadata requests require authentication header to be provided, having JWT token saved in it.
type MetadataServer interface {
	// PingConnection performs ping connection and creates user record on the server side at the same time,
	// if such does not exist.
	PingConnection(context.Context, *PingConnectionRequest) (*PingConnectionResponse, error)
	// GetSessions performs existing sessions retrieval operation by the configured user.
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error)
	// CreateSession performs session creation operation by the configured user.
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// RemoveSession performs session removal operation by the configured user. Allowed for session owner only.
	RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error)
	// GetLobbySet performs existing lobbies retrieval operation by the provided session id, by the configured user.
	GetLobbySet(context.Context, *GetLobbySetRequest) (*GetLobbySetResponse, error)
	// CreateLobby performs lobby creation operation by the configured user.
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
	// RemoveLobby performs lobby removal operation by the configured user. Allowed for lobby owner only.
	RemoveLobby(context.Context, *RemoveLobbyRequest) (*RemoveLobbyResponse, error)
	// GetUserMetadata performs user metadata retrieval request by the configured user.
	GetUserMetadata(context.Context, *GetUserMetadataRequest) (*GetUserMetadataResponse, error)
	// GetChest performs chests retrieval for the selected session by the configured user.
	GetChests(context.Context, *GetChestsRequest) (*GetChestsResponse, error)
	// GetMap performs map retrieval for the selected session by the configured user.
	GetMap(*GetMapRequest, grpc.ServerStreamingServer[GetMapResponse]) error
	// GetChatMessages performs chat messages retrieval for the selected session by the configured user.
	GetChatMessages(*GetChatMessagesRequest, grpc.ServerStreamingServer[GetChatMessagesResponse]) error
	// CreateChatMessage performs chat message creation for the selected session by the configured user.
	CreateChatMessage(context.Context, *CreateChatMessageRequest) (*CreateChatMessageResponse, error)
	mustEmbedUnimplementedMetadataServer()
}

// UnimplementedMetadataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataServer struct{}

func (UnimplementedMetadataServer) PingConnection(context.Context, *PingConnectionRequest) (*PingConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingConnection not implemented")
}
func (UnimplementedMetadataServer) GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedMetadataServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedMetadataServer) RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedMetadataServer) GetLobbySet(context.Context, *GetLobbySetRequest) (*GetLobbySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLobbySet not implemented")
}
func (UnimplementedMetadataServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedMetadataServer) RemoveLobby(context.Context, *RemoveLobbyRequest) (*RemoveLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLobby not implemented")
}
func (UnimplementedMetadataServer) GetUserMetadata(context.Context, *GetUserMetadataRequest) (*GetUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMetadata not implemented")
}
func (UnimplementedMetadataServer) GetChests(context.Context, *GetChestsRequest) (*GetChestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChests not implemented")
}
func (UnimplementedMetadataServer) GetMap(*GetMapRequest, grpc.ServerStreamingServer[GetMapResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedMetadataServer) GetChatMessages(*GetChatMessagesRequest, grpc.ServerStreamingServer[GetChatMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedMetadataServer) CreateChatMessage(context.Context, *CreateChatMessageRequest) (*CreateChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatMessage not implemented")
}
func (UnimplementedMetadataServer) mustEmbedUnimplementedMetadataServer() {}
func (UnimplementedMetadataServer) testEmbeddedByValue()                  {}

// UnsafeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServer will
// result in compilation errors.
type UnsafeMetadataServer interface {
	mustEmbedUnimplementedMetadataServer()
}

func RegisterMetadataServer(s grpc.ServiceRegistrar, srv MetadataServer) {
	// If the following call pancis, it indicates UnimplementedMetadataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Metadata_ServiceDesc, srv)
}

func _Metadata_PingConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).PingConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_PingConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).PingConnection(ctx, req.(*PingConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RemoveSession(ctx, req.(*RemoveSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetLobbySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLobbySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetLobbySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_GetLobbySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetLobbySet(ctx, req.(*GetLobbySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RemoveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RemoveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_RemoveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RemoveLobby(ctx, req.(*RemoveLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_GetUserMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetUserMetadata(ctx, req.(*GetUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetChests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetChests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_GetChests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetChests(ctx, req.(*GetChestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetMap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).GetMap(m, &grpc.GenericServerStream[GetMapRequest, GetMapResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metadata_GetMapServer = grpc.ServerStreamingServer[GetMapResponse]

func _Metadata_GetChatMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChatMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).GetChatMessages(m, &grpc.GenericServerStream[GetChatMessagesRequest, GetChatMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metadata_GetChatMessagesServer = grpc.ServerStreamingServer[GetChatMessagesResponse]

func _Metadata_CreateChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_CreateChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateChatMessage(ctx, req.(*CreateChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metadata_ServiceDesc is the grpc.ServiceDesc for Metadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingConnection",
			Handler:    _Metadata_PingConnection_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _Metadata_GetSessions_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Metadata_CreateSession_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _Metadata_RemoveSession_Handler,
		},
		{
			MethodName: "GetLobbySet",
			Handler:    _Metadata_GetLobbySet_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _Metadata_CreateLobby_Handler,
		},
		{
			MethodName: "RemoveLobby",
			Handler:    _Metadata_RemoveLobby_Handler,
		},
		{
			MethodName: "GetUserMetadata",
			Handler:    _Metadata_GetUserMetadata_Handler,
		},
		{
			MethodName: "GetChests",
			Handler:    _Metadata_GetChests_Handler,
		},
		{
			MethodName: "CreateChatMessage",
			Handler:    _Metadata_CreateChatMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMap",
			Handler:       _Metadata_GetMap_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChatMessages",
			Handler:       _Metadata_GetChatMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/metadata/metadata.proto",
}
