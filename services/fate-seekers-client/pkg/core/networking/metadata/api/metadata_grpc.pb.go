// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: metadata/v1/metadata.proto

package metadatav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetadataService_PingConnection_FullMethodName        = "/metadata.v1.MetadataService/PingConnection"
	MetadataService_UpdateSessionActivity_FullMethodName = "/metadata.v1.MetadataService/UpdateSessionActivity"
	MetadataService_CreateUserIfNotExists_FullMethodName = "/metadata.v1.MetadataService/CreateUserIfNotExists"
	MetadataService_GetUserSessions_FullMethodName       = "/metadata.v1.MetadataService/GetUserSessions"
	MetadataService_GetFilteredSession_FullMethodName    = "/metadata.v1.MetadataService/GetFilteredSession"
	MetadataService_CreateSession_FullMethodName         = "/metadata.v1.MetadataService/CreateSession"
	MetadataService_RemoveSession_FullMethodName         = "/metadata.v1.MetadataService/RemoveSession"
	MetadataService_StartSession_FullMethodName          = "/metadata.v1.MetadataService/StartSession"
	MetadataService_GetSessionMetadata_FullMethodName    = "/metadata.v1.MetadataService/GetSessionMetadata"
	MetadataService_GetLobbySet_FullMethodName           = "/metadata.v1.MetadataService/GetLobbySet"
	MetadataService_CreateLobby_FullMethodName           = "/metadata.v1.MetadataService/CreateLobby"
	MetadataService_RemoveLobby_FullMethodName           = "/metadata.v1.MetadataService/RemoveLobby"
	MetadataService_GetUsersMetadata_FullMethodName      = "/metadata.v1.MetadataService/GetUsersMetadata"
	MetadataService_GetChests_FullMethodName             = "/metadata.v1.MetadataService/GetChests"
	MetadataService_GetMap_FullMethodName                = "/metadata.v1.MetadataService/GetMap"
	MetadataService_GetChatMessages_FullMethodName       = "/metadata.v1.MetadataService/GetChatMessages"
	MetadataService_CreateChatMessage_FullMethodName     = "/metadata.v1.MetadataService/CreateChatMessage"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Represents service used to retrieve user content related data.
// All the metadata requests require authentication header to be provided, having JWT token saved in it.
type MetadataServiceClient interface {
	// PingConnection performs ping connection and creates user record on the server side at the same time,
	// if such does not exist.
	PingConnection(ctx context.Context, in *PingConnectionRequest, opts ...grpc.CallOption) (*PingConnectionResponse, error)
	// UpdateSessionActivity performs session activity update.
	UpdateSessionActivity(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateSessionActivityRequest, UpdateSessionActivityResponse], error)
	// CreateUserIfNotExists performs attempt to create a user, if it hasn't been create yet.
	CreateUserIfNotExists(ctx context.Context, in *CreateUserIfNotExistsRequest, opts ...grpc.CallOption) (*CreateUserIfNotExistsResponse, error)
	// GetUserSessions performs existing sessions retrieval operation by the configured user.
	GetUserSessions(ctx context.Context, in *GetUserSessionsRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error)
	// GetFilteredSession performs existing filtered session retrieval operation by the configured user.
	GetFilteredSession(ctx context.Context, in *GetFilteredSessionRequest, opts ...grpc.CallOption) (*GetFilteredSessionResponse, error)
	// CreateSession performs session creation operation by the configured user.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// RemoveSession performs session removal operation by the configured user. Allowed for session owner only.
	RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error)
	// StartSession performs start session operation by the configured user. Allowed for session host only.
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	// GetSessionMetadata performs session metadata retrieval request by the configured user.
	GetSessionMetadata(ctx context.Context, in *GetSessionMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSessionMetadataResponse], error)
	// GetLobbySet performs existing lobbies retrieval operation by the provided session id, by the configured user.
	GetLobbySet(ctx context.Context, in *GetLobbySetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLobbySetResponse], error)
	// CreateLobby performs lobby creation operation by the configured user.
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
	// RemoveLobby performs lobby removal operation by the configured user. Allowed for lobby owner only.
	RemoveLobby(ctx context.Context, in *RemoveLobbyRequest, opts ...grpc.CallOption) (*RemoveLobbyResponse, error)
	// GetUsersMetadata performs users metadata retrieval request by the configured user.
	GetUsersMetadata(ctx context.Context, in *GetUsersMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUsersMetadataResponse], error)
	// GetChests performs chests retrieval for the selected session by the configured user.
	GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsResponse, error)
	// GetMap performs map retrieval for the selected session by the configured user.
	GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMapResponse], error)
	// GetChatMessages performs chat messages retrieval for the selected session by the configured user.
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChatMessagesResponse], error)
	// CreateChatMessage performs chat message creation for the selected session by the configured user.
	CreateChatMessage(ctx context.Context, in *CreateChatMessageRequest, opts ...grpc.CallOption) (*CreateChatMessageResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) PingConnection(ctx context.Context, in *PingConnectionRequest, opts ...grpc.CallOption) (*PingConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingConnectionResponse)
	err := c.cc.Invoke(ctx, MetadataService_PingConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateSessionActivity(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateSessionActivityRequest, UpdateSessionActivityResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[0], MetadataService_UpdateSessionActivity_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateSessionActivityRequest, UpdateSessionActivityResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_UpdateSessionActivityClient = grpc.ClientStreamingClient[UpdateSessionActivityRequest, UpdateSessionActivityResponse]

func (c *metadataServiceClient) CreateUserIfNotExists(ctx context.Context, in *CreateUserIfNotExistsRequest, opts ...grpc.CallOption) (*CreateUserIfNotExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserIfNotExistsResponse)
	err := c.cc.Invoke(ctx, MetadataService_CreateUserIfNotExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetUserSessions(ctx context.Context, in *GetUserSessionsRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSessionsResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetFilteredSession(ctx context.Context, in *GetFilteredSessionRequest, opts ...grpc.CallOption) (*GetFilteredSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredSessionResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetFilteredSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, MetadataService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSessionResponse)
	err := c.cc.Invoke(ctx, MetadataService_RemoveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, MetadataService_StartSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetSessionMetadata(ctx context.Context, in *GetSessionMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSessionMetadataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[1], MetadataService_GetSessionMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSessionMetadataRequest, GetSessionMetadataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetSessionMetadataClient = grpc.ServerStreamingClient[GetSessionMetadataResponse]

func (c *metadataServiceClient) GetLobbySet(ctx context.Context, in *GetLobbySetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLobbySetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[2], MetadataService_GetLobbySet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetLobbySetRequest, GetLobbySetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetLobbySetClient = grpc.ServerStreamingClient[GetLobbySetResponse]

func (c *metadataServiceClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, MetadataService_CreateLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RemoveLobby(ctx context.Context, in *RemoveLobbyRequest, opts ...grpc.CallOption) (*RemoveLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLobbyResponse)
	err := c.cc.Invoke(ctx, MetadataService_RemoveLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetUsersMetadata(ctx context.Context, in *GetUsersMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUsersMetadataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[3], MetadataService_GetUsersMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUsersMetadataRequest, GetUsersMetadataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetUsersMetadataClient = grpc.ServerStreamingClient[GetUsersMetadataResponse]

func (c *metadataServiceClient) GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChestsResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetChests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMapResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[4], MetadataService_GetMap_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMapRequest, GetMapResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetMapClient = grpc.ServerStreamingClient[GetMapResponse]

func (c *metadataServiceClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChatMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[5], MetadataService_GetChatMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetChatMessagesRequest, GetChatMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetChatMessagesClient = grpc.ServerStreamingClient[GetChatMessagesResponse]

func (c *metadataServiceClient) CreateChatMessage(ctx context.Context, in *CreateChatMessageRequest, opts ...grpc.CallOption) (*CreateChatMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatMessageResponse)
	err := c.cc.Invoke(ctx, MetadataService_CreateChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility.
//
// Represents service used to retrieve user content related data.
// All the metadata requests require authentication header to be provided, having JWT token saved in it.
type MetadataServiceServer interface {
	// PingConnection performs ping connection and creates user record on the server side at the same time,
	// if such does not exist.
	PingConnection(context.Context, *PingConnectionRequest) (*PingConnectionResponse, error)
	// UpdateSessionActivity performs session activity update.
	UpdateSessionActivity(grpc.ClientStreamingServer[UpdateSessionActivityRequest, UpdateSessionActivityResponse]) error
	// CreateUserIfNotExists performs attempt to create a user, if it hasn't been create yet.
	CreateUserIfNotExists(context.Context, *CreateUserIfNotExistsRequest) (*CreateUserIfNotExistsResponse, error)
	// GetUserSessions performs existing sessions retrieval operation by the configured user.
	GetUserSessions(context.Context, *GetUserSessionsRequest) (*GetUserSessionsResponse, error)
	// GetFilteredSession performs existing filtered session retrieval operation by the configured user.
	GetFilteredSession(context.Context, *GetFilteredSessionRequest) (*GetFilteredSessionResponse, error)
	// CreateSession performs session creation operation by the configured user.
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// RemoveSession performs session removal operation by the configured user. Allowed for session owner only.
	RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error)
	// StartSession performs start session operation by the configured user. Allowed for session host only.
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	// GetSessionMetadata performs session metadata retrieval request by the configured user.
	GetSessionMetadata(*GetSessionMetadataRequest, grpc.ServerStreamingServer[GetSessionMetadataResponse]) error
	// GetLobbySet performs existing lobbies retrieval operation by the provided session id, by the configured user.
	GetLobbySet(*GetLobbySetRequest, grpc.ServerStreamingServer[GetLobbySetResponse]) error
	// CreateLobby performs lobby creation operation by the configured user.
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
	// RemoveLobby performs lobby removal operation by the configured user. Allowed for lobby owner only.
	RemoveLobby(context.Context, *RemoveLobbyRequest) (*RemoveLobbyResponse, error)
	// GetUsersMetadata performs users metadata retrieval request by the configured user.
	GetUsersMetadata(*GetUsersMetadataRequest, grpc.ServerStreamingServer[GetUsersMetadataResponse]) error
	// GetChests performs chests retrieval for the selected session by the configured user.
	GetChests(context.Context, *GetChestsRequest) (*GetChestsResponse, error)
	// GetMap performs map retrieval for the selected session by the configured user.
	GetMap(*GetMapRequest, grpc.ServerStreamingServer[GetMapResponse]) error
	// GetChatMessages performs chat messages retrieval for the selected session by the configured user.
	GetChatMessages(*GetChatMessagesRequest, grpc.ServerStreamingServer[GetChatMessagesResponse]) error
	// CreateChatMessage performs chat message creation for the selected session by the configured user.
	CreateChatMessage(context.Context, *CreateChatMessageRequest) (*CreateChatMessageResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataServiceServer struct{}

func (UnimplementedMetadataServiceServer) PingConnection(context.Context, *PingConnectionRequest) (*PingConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingConnection not implemented")
}
func (UnimplementedMetadataServiceServer) UpdateSessionActivity(grpc.ClientStreamingServer[UpdateSessionActivityRequest, UpdateSessionActivityResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSessionActivity not implemented")
}
func (UnimplementedMetadataServiceServer) CreateUserIfNotExists(context.Context, *CreateUserIfNotExistsRequest) (*CreateUserIfNotExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserIfNotExists not implemented")
}
func (UnimplementedMetadataServiceServer) GetUserSessions(context.Context, *GetUserSessionsRequest) (*GetUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (UnimplementedMetadataServiceServer) GetFilteredSession(context.Context, *GetFilteredSessionRequest) (*GetFilteredSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredSession not implemented")
}
func (UnimplementedMetadataServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedMetadataServiceServer) RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedMetadataServiceServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedMetadataServiceServer) GetSessionMetadata(*GetSessionMetadataRequest, grpc.ServerStreamingServer[GetSessionMetadataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSessionMetadata not implemented")
}
func (UnimplementedMetadataServiceServer) GetLobbySet(*GetLobbySetRequest, grpc.ServerStreamingServer[GetLobbySetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLobbySet not implemented")
}
func (UnimplementedMetadataServiceServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedMetadataServiceServer) RemoveLobby(context.Context, *RemoveLobbyRequest) (*RemoveLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLobby not implemented")
}
func (UnimplementedMetadataServiceServer) GetUsersMetadata(*GetUsersMetadataRequest, grpc.ServerStreamingServer[GetUsersMetadataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersMetadata not implemented")
}
func (UnimplementedMetadataServiceServer) GetChests(context.Context, *GetChestsRequest) (*GetChestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChests not implemented")
}
func (UnimplementedMetadataServiceServer) GetMap(*GetMapRequest, grpc.ServerStreamingServer[GetMapResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedMetadataServiceServer) GetChatMessages(*GetChatMessagesRequest, grpc.ServerStreamingServer[GetChatMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedMetadataServiceServer) CreateChatMessage(context.Context, *CreateChatMessageRequest) (*CreateChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatMessage not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}
func (UnimplementedMetadataServiceServer) testEmbeddedByValue()                         {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_PingConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).PingConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_PingConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).PingConnection(ctx, req.(*PingConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateSessionActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServiceServer).UpdateSessionActivity(&grpc.GenericServerStream[UpdateSessionActivityRequest, UpdateSessionActivityResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_UpdateSessionActivityServer = grpc.ClientStreamingServer[UpdateSessionActivityRequest, UpdateSessionActivityResponse]

func _MetadataService_CreateUserIfNotExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserIfNotExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CreateUserIfNotExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CreateUserIfNotExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CreateUserIfNotExists(ctx, req.(*CreateUserIfNotExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetUserSessions(ctx, req.(*GetUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetFilteredSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetFilteredSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetFilteredSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetFilteredSession(ctx, req.(*GetFilteredSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RemoveSession(ctx, req.(*RemoveSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_StartSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetSessionMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSessionMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetSessionMetadata(m, &grpc.GenericServerStream[GetSessionMetadataRequest, GetSessionMetadataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetSessionMetadataServer = grpc.ServerStreamingServer[GetSessionMetadataResponse]

func _MetadataService_GetLobbySet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLobbySetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetLobbySet(m, &grpc.GenericServerStream[GetLobbySetRequest, GetLobbySetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetLobbySetServer = grpc.ServerStreamingServer[GetLobbySetResponse]

func _MetadataService_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RemoveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RemoveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_RemoveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RemoveLobby(ctx, req.(*RemoveLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetUsersMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetUsersMetadata(m, &grpc.GenericServerStream[GetUsersMetadataRequest, GetUsersMetadataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetUsersMetadataServer = grpc.ServerStreamingServer[GetUsersMetadataResponse]

func _MetadataService_GetChests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetChests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetChests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetChests(ctx, req.(*GetChestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetMap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetMap(m, &grpc.GenericServerStream[GetMapRequest, GetMapResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetMapServer = grpc.ServerStreamingServer[GetMapResponse]

func _MetadataService_GetChatMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChatMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetChatMessages(m, &grpc.GenericServerStream[GetChatMessagesRequest, GetChatMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetadataService_GetChatMessagesServer = grpc.ServerStreamingServer[GetChatMessagesResponse]

func _MetadataService_CreateChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CreateChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CreateChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CreateChatMessage(ctx, req.(*CreateChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.v1.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingConnection",
			Handler:    _MetadataService_PingConnection_Handler,
		},
		{
			MethodName: "CreateUserIfNotExists",
			Handler:    _MetadataService_CreateUserIfNotExists_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _MetadataService_GetUserSessions_Handler,
		},
		{
			MethodName: "GetFilteredSession",
			Handler:    _MetadataService_GetFilteredSession_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _MetadataService_CreateSession_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _MetadataService_RemoveSession_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _MetadataService_StartSession_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _MetadataService_CreateLobby_Handler,
		},
		{
			MethodName: "RemoveLobby",
			Handler:    _MetadataService_RemoveLobby_Handler,
		},
		{
			MethodName: "GetChests",
			Handler:    _MetadataService_GetChests_Handler,
		},
		{
			MethodName: "CreateChatMessage",
			Handler:    _MetadataService_CreateChatMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateSessionActivity",
			Handler:       _MetadataService_UpdateSessionActivity_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSessionMetadata",
			Handler:       _MetadataService_GetSessionMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLobbySet",
			Handler:       _MetadataService_GetLobbySet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsersMetadata",
			Handler:       _MetadataService_GetUsersMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMap",
			Handler:       _MetadataService_GetMap_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChatMessages",
			Handler:       _MetadataService_GetChatMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metadata/v1/metadata.proto",
}
