syntax = "proto3";
option go_package = "github.com/YarikRevich/fate-seekers/pkg/core/networking/metadata/api";

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

package metadata.v1;

// Represents service used to retrieve user content related data.
// All the metadata requests require authentication header to be provided, having JWT token saved in it.
service MetadataService {
    // PingConnection performs ping connection and creates user record on the server side at the same time, 
    // if such does not exist.
    rpc PingConnection(PingConnectionRequest) returns (PingConnectionResponse) {};

    // CreateUserIfNotExists performs attempt to create a user, if it hasn't been create yet.
    rpc CreateUserIfNotExists(CreateUserIfNotExistsRequest) returns (CreateUserIfNotExistsResponse) {};

    // GetSessions performs existing sessions retrieval operation by the configured user.
    rpc GetSessions(GetSessionsRequest) returns (GetSessionsResponse) {};

    // CreateSession performs session creation operation by the configured user.
    rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {};

    // RemoveSession performs session removal operation by the configured user. Allowed for session owner only.
    rpc RemoveSession(RemoveSessionRequest) returns (RemoveSessionResponse) {};

    // GetLobbySet performs existing lobbies retrieval operation by the provided session id, by the configured user.
    rpc GetLobbySet(GetLobbySetRequest) returns (GetLobbySetResponse) {};

    // CreateLobby performs lobby creation operation by the configured user.
    rpc CreateLobby(CreateLobbyRequest) returns (CreateLobbyResponse) {};

    // RemoveLobby performs lobby removal operation by the configured user. Allowed for lobby owner only.
    rpc RemoveLobby(RemoveLobbyRequest) returns (RemoveLobbyResponse) {};

    // GetUserMetadata performs user metadata retrieval request by the configured user.
    rpc GetUserMetadata(GetUserMetadataRequest) returns (stream GetUserMetadataResponse) {};

    // GetChests performs chests retrieval for the selected session by the configured user.
    rpc GetChests(GetChestsRequest) returns (GetChestsResponse) {};

    // GetMap performs map retrieval for the selected session by the configured user.
    rpc GetMap(GetMapRequest) returns (stream GetMapResponse) {};
    
    // GetChatMessages performs chat messages retrieval for the selected session by the configured user.
    rpc GetChatMessages(GetChatMessagesRequest) returns (stream GetChatMessagesResponse) {};

    // CreateChatMessage performs chat message creation for the selected session by the configured user.
    rpc CreateChatMessage(CreateChatMessageRequest) returns (CreateChatMessageResponse) {};
}

// PingConnectionRequest represents  ping connection request message.
message PingConnectionRequest {
    string issuer = 1 [(buf.validate.field).string.uuid = true];
};

// PingConnectionResponse represents ping connection response message.
message PingConnectionResponse {
};

// CreateUserIfNotExistsRequest represents user creation attempt request message.
message CreateUserIfNotExistsRequest {
    string issuer = 1 [(buf.validate.field).string.uuid = true];
};

// CreateUserIfNotExistsRequest represents user creation attempt response message.
message CreateUserIfNotExistsResponse {

};

// GetSessionsRequest represents get sesssions request.
message GetSessionsRequest {
    string issuer = 1 [(buf.validate.field).string.uuid = true];
};

// Session represents common session retrieval message.
message Session {
    int64 session_id = 1; 
    uint64 seed = 2;
    string name = 3;
}

// GetSessionsResponse represents get sesssions response.
message GetSessionsResponse {
    repeated Session sessions = 1;
};

// CreateSessionRequest represents create session request.
// User is allowed to create only 3 sessions in 10 minutes.
message CreateSessionRequest {
    string name = 1 [(buf.validate.field).string.pattern = "^[a-zA-Z0-9-]{8}$"];
    string issuer = 2 [(buf.validate.field).string.uuid = true];
    optional uint64 seed = 3 ;
};

// CreateSessionResponse represents create session response.
message CreateSessionResponse {
    int64 session_id = 1;
};

// RemoveSessionRequest represents remove session request.
message RemoveSessionRequest {
    int64 session_id = 1;
    string issuer = 2 [(buf.validate.field).string.uuid = true];
};

// RemoveSessionResponse represents remove session response.
message RemoveSessionResponse {
};

// GetLobbySetRequest represents user create lobby request.
message GetLobbySetRequest {
    int64 session_id = 1;
    string issuer = 2 [(buf.validate.field).string.uuid = true];
};

// GetLobbySetResponse represents user create lobby response.
message GetLobbySetResponse {
    repeated string issuers = 1;
};

// CreateLobbyRequest represents user create lobby request.
message CreateLobbyRequest {
    int64 session_id = 1;
    string issuer = 2 [(buf.validate.field).string.uuid = true];
};

// CreateLobbyResponse represents user create lobby response.
message CreateLobbyResponse {
};

// RemoveLobbyRequest represents user remove lobby request.
message RemoveLobbyRequest {
    string issuer = 1 [(buf.validate.field).string.uuid = true];
};

// RemoveLobbyResponse represents user remove lobby response.
message RemoveLobbyResponse {
};

// Represents users metadata retrieval request message.
message GetUserMetadataRequest {
    int64 session_id = 1;
    string issuer = 2 [(buf.validate.field).string.uuid = true];
};

// Represents common user metadata message.
message UserMetadata {
    uint64 health = 1;
    uint64 skin = 2;
    bool eliminated = 3;
    Position position = 4;
};

// Represents users metadata retrieval response message.
message GetUserMetadataResponse {
    UserMetadata user_metadata = 1;
};

// GetChestsRequest represents chests retrieval request message.
message GetChestsRequest {
    int64 session_id = 1;
};

// Position represents common position message.
message Position {
    double x = 1;
    double y = 2;
};

// GetChestsResponse represents chests retrieval response streaming message.
message GetChestsResponse {
    repeated Position positions = 1;
};

// GetMapRequest represents map retrieval request message.
message GetMapRequest {
    int64 session_id = 1;
};

// GetMapResponse represents map retrieval response streaming message.
message GetMapResponse {
    repeated Position positions = 1;
};

// GetChatMessagesRequest represents chat messages retrieval request message.
message GetChatMessagesRequest {
    int64 session_id = 1;
    uint64 offset = 2;
};

// ChatMessage represents common chat retrieval message.
message ChatMessage {
    string content = 1;
    string issuer = 2;
    google.protobuf.Timestamp timestamp = 3;
};

// GetChatMessagesResponse represents chat messages retrieval response streaming message.
message GetChatMessagesResponse {
    repeated ChatMessage messages = 1;
};

// CreateChatMessageRequest represents chat message creation request message.
message CreateChatMessageRequest {
    int64 session_id = 1;
    uint64 offset = 2;
};

// CreateChatMessageResponse represents chat message creation request message.
message CreateChatMessageResponse {
};