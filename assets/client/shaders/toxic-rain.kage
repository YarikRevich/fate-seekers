//kage:unit pixels

package main

var Time float
var Brightness float

func Random11(inputValue float, seed float) float {
    return fract(sin(inputValue * 132.232) * seed)
}

func Random21(inputValue vec2, seed float) float {
    return fract(sin(dot(inputValue, vec2(233.456, 413.12))) * seed)
}

func Drops(uv vec2, seed float) vec2 {
    var cellsResolution = 55.0
    uv /= cellsResolution

    var rowIndex = floor(uv.y)
    var shiftX = Random11(rowIndex, seed)
    uv.x += shiftX

    var cellIndex = floor(uv)

    var dropSpeed = 0.1
    var dropShift = mod(Time * dropSpeed + Random21(cellIndex, seed), 0.4)
    uv.y -= clamp(0.4, 0.4, smoothstep(0.0, 0.4, dropShift))

    var cellUv = fract(uv)
    var cellCenter = vec2(0.5, 0.5)
    var distanceFromCenter = length(cellUv - cellCenter)

    var isDropShown = step(0.8, Random21(cellIndex, seed + 14244.324))

    var dropIntensity = 1.0 - fract(Time * 0.1 + Random21(cellIndex, seed + 32132.432) * 2.0) * 4.2
    dropIntensity = sign(dropIntensity) * pow(abs(dropIntensity), 4.0)
    dropIntensity = clamp(dropIntensity, 0.0, 1.0)

    var isInsideDrop = 1.0 - step(0.1, distanceFromCenter)

    var vecToCenter = normalize(cellCenter - cellUv)
    var dropValue = vecToCenter * distanceFromCenter * distanceFromCenter * 30.0

    return dropValue * isInsideDrop * isDropShown * dropIntensity
}

func Fragment(targetCoords vec4, src vec2, _ vec4) vec4 {
    var drops = vec2(0.0, 0.0)

    for i := 0; i < 6; i++ {
        drops += Drops(src, 42424.43 + float(i) * 12313.432)
    }
    
    var greenAmount = length(drops) * Brightness
	
    return vec4(0.0, greenAmount, 0.0, 0.0)
}